{"version":3,"sources":["events.js","components/ChatsPage/Sidebar.js","components/ChatsPage/MessageHeader.js","components/ChatsPage/MessagesBody.js","components/ChatsPage/MessageInput.js","components/ChatsPage/ChatPage.js","components/LoginPage/LoginPage.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","IS_USER","NEW_USER","INIT_CHATS","LOGOUT","MESSAGE_SEND","TYPING","P_MESSAGE_SEND","P_TYPING","CHECK_CHANNEL","CREATE_CHANNEL","Sidebar","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","modal","channelName","channelDescription","error","displayChannels","chats","map","chat","react_default","a","createElement","Menu","Item","key","name","onClick","props","setActiveChannel","active","activeChannel","msgCount","Label","size","color","displayUsers","users","_this$props","user","setActivePChannel","pChats","nickname","assign","You...","keys","pChat","filter","pchat","toUpperCase","slice","react_dots_loader_lib_default","style","marginLeft","distance","visible","isTyping","openModal","setState","closeModal","handleChange","e","defineProperty","target","value","isFormValid","_ref","handleSubmit","_this$state","socket","emit","events","checkChannel","isChannel","inherits","createClass","_this$props2","logout","_this$state2","Fragment","background","paddingTop","vertical","inverted","fluid","stackable","Header","as","Icon","Content","Subheader","paddingLeft","fontSize","Button","icon","labelPosition","Modal","open","content","Form","Field","Input","placeholder","onChange","Message","Actions","Component","MessageHeader","Segment","description","MessagesBody","scrollDown","b","contaniner","refs","scrollTop","scrollHeight","messages","typingUser","height","ref","overflowY","minHeight","display","flexDirection","justifyContent","padding","paddingRight","message","Card","id","marginTop","textAlign","sender","moment","timef","fromNow","className","MessageInput","msg","sendMsg","handleOnFocused","sendTyping","handleOnBlur","onSubmit","onFocus","onBlur","link","circular","disabled","ChatPage","initChats","_chats","updateChats","init","undefined","newChats","toConsumableArray","addTyping","channel","includes","push","u","addPTyping","_ref2","console","log","addMessage","_ref3","addPMessage","_ref4","type","receiver","socketId","newActive","on","_this$props3","Grid","margin","Column","computer","tablet","mobile","ChatsPage_Sidebar","ChatsPage_MessageHeader","ChatsPage_MessagesBody","ChatsPage_MessageInput","LoginPage","isvalid","setUser","isUser","event","verticalAlign","autoFocus","negative","socketUrl","Main","initSocket","io","setUsers","isNewUsers","newUsers","outUser","newPChats","oldPChats","newUser","ChatsPage_ChatPage","components_LoginPage_LoginPage","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.956bee51.chunk.js","sourcesContent":["module.exports = {\r\n    IS_USER:\"IS_USER\",\r\n    NEW_USER:\"NEW_USER\",\r\n    INIT_CHATS:\"INIT_CHATS\",\r\n    LOGOUT:\"LOGOUT\",\r\n    MESSAGE_SEND:\"MESSAGE_SEND\",\r\n    TYPING:\"TYPING\", \r\n    P_MESSAGE_SEND:\"P_MESSAGE_SEND\",\r\n    P_TYPING:\"P_TYPING\",\r\n    CHECK_CHANNEL:\"CHECK_CHANNEL\",\r\n    CREATE_CHANNEL:\"CREATE_CHANNEL\"\r\n}","import React, { Component } from 'react'\r\nimport events from '../../events'\r\nimport { Menu, Header, Icon, Button, Label, Modal, Form, Input, Message } from 'semantic-ui-react'\r\nimport Loader from 'react-dots-loader'\r\nimport 'react-dots-loader/index.css'\r\n\r\nexport class Sidebar extends Component {\r\n\r\n  state = {\r\n    modal: false,\r\n    channelName: '',\r\n    channelDescription: '',\r\n    error: null\r\n  }\r\n\r\n  displayChannels = chats => (\r\n    chats.map(chat => (\r\n      <Menu.Item\r\n        key={chat.name}\r\n        onClick={() => this.props.setActiveChannel(chat.name)}\r\n        active={this.props.activeChannel.name === chat.name}\r\n      >\r\n        # {chat.name}\r\n        {chat.msgCount > 0 && <Label size='mini' color='red'> {chat.msgCount} </Label>}\r\n      </Menu.Item>\r\n    ))\r\n  )\r\n\r\n  displayUsers = users => {\r\n    let { user, setActivePChannel, pChats, activeChannel } = this.props\r\n    delete users[user.nickname]\r\n    users = Object.assign({ 'You...': user }, users)\r\n    return Object.keys(users).map(user => {\r\n      let pChat = pChats.filter(pchat => pchat.name === user)\r\n      let msgCount = null\r\n      if (pChat[0] && pChat[0].name !== activeChannel.name) {\r\n        if (pChat[0].msgCount > 0) {\r\n          msgCount = pChat[0].msgCount\r\n        }\r\n      }\r\n      return (\r\n        <Menu.Item\r\n          key={user}\r\n          onClick={(user === 'You...') ? null : () => setActivePChannel(user)}\r\n          active={this.props.activeChannel.name === user}\r\n        >\r\n          # {user[0].toUpperCase() + user.slice(1)}\r\n          <Loader\r\n            style={{ marginLeft: '10px' }}\r\n            size={4} color='grey' distance={3}\r\n            visible={pChat[0] ? pChat[0].isTyping : false} />\r\n          {msgCount && <Label size='mini' color='red'> {msgCount} </Label>}\r\n        </Menu.Item>\r\n      )\r\n    })\r\n  }\r\n\r\n  openModal = () => this.setState({ modal: true })\r\n\r\n  closeModal = () => this.setState({ modal: false, channelName: '', channelDescription: '', error: null })\r\n\r\n  handleChange = e => this.setState({ [e.target.name]: e.target.value })\r\n\r\n  isFormValid = ({ channelDescription, channelName }) => {\r\n    if (channelDescription && channelName) {\r\n      this.setState({ error: null })\r\n      return true\r\n    } else {\r\n      this.setState({ error: 'Both Name and Description are require ' })\r\n      return false\r\n    }\r\n  }\r\n\r\n  handleSubmit = () => {\r\n    this.setState({ error: null })\r\n    let { channelDescription, channelName } = this.state\r\n    if (this.isFormValid(this.state)) {\r\n      let { socket } = this.props\r\n      socket.emit(events.CHECK_CHANNEL, { channelName, channelDescription }, this.checkChannel)\r\n    }\r\n  }\r\n\r\n  checkChannel = isChannel => {\r\n    isChannel ? this.setState({ error: `Channel \"${ this.state.channelName }\" name alredy take` }) :\r\n    this.closeModal()\r\n  }\r\n\r\n  render() {\r\n    let { user, users, chats, logout } = this.props\r\n    let { modal, error } = this.state\r\n    return (\r\n      <React.Fragment>\r\n        <Menu\r\n          style={{ background: '#4c3c4c', paddingTop: '2em' }}\r\n          vertical\r\n          inverted\r\n          fluid\r\n          stackable\r\n          size='large'\r\n        >\r\n\r\n          <Header inverted as='h3'>\r\n            <Icon name='chat' />\r\n            <Header.Content> Simple Chat </Header.Content>\r\n            <Header.Subheader>\r\n              Login as : {user.nickname[0].toUpperCase() + user.nickname.slice(1)}\r\n            </Header.Subheader>\r\n          </Header>\r\n          <Menu.Menu>\r\n            <Menu.Item style={{ paddingLeft: '0' }}>\r\n              <span style={{ fontSize: '1.2em' }}>\r\n                <Icon name='bullhorn' /> Channel lists\r\n              </span>\r\n              <Icon name='add' onClick={this.openModal} />\r\n            </Menu.Item>\r\n            {chats[0] && this.displayChannels(chats)}\r\n          </Menu.Menu>\r\n          <br />\r\n          <Menu.Menu>\r\n            <Menu.Item style={{ paddingLeft: '0' }}>\r\n              <span style={{ fontSize: '1.2em' }}>\r\n                <Icon name='address book' /> Online Users\r\n              </span>\r\n            </Menu.Item>\r\n            {(users && chats[0]) && this.displayUsers(users)}\r\n          </Menu.Menu>\r\n          <br />\r\n          <Menu.Menu>\r\n            <Menu.Item style={{ paddingLeft: '0' }}>\r\n              <Button\r\n                icon\r\n                inverted\r\n                labelPosition='right'\r\n                onClick={logout}\r\n              >\r\n                <Icon name='sign-out alternate' />\r\n                LogOut\r\n              </Button>\r\n            </Menu.Item>\r\n          </Menu.Menu>\r\n        </Menu>\r\n        <Modal open={modal} size='small'  >\r\n          <Header icon='bullhorn' content='Add new Channel' />\r\n          <Modal.Content>\r\n            <Form>\r\n              <Form.Field>\r\n                <Input\r\n                  placeholder='Channel Name'\r\n                  name='channelName'\r\n                  onChange={this.handleChange}\r\n                />\r\n              </Form.Field>\r\n              <Form.Field>\r\n                <Input\r\n                  name='channelDescription'\r\n                  placeholder='Channel Description'\r\n                  onChange={this.handleChange}\r\n                />\r\n              </Form.Field>\r\n            </Form>\r\n            {\r\n              error && (\r\n                <Message error >\r\n                  <h4>Error</h4>\r\n                  {this.state.error}\r\n                </Message>\r\n              )\r\n            }\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button color='red' inverted onClick={this.closeModal}>\r\n              <Icon name='remove' /> Cancel\r\n            </Button>\r\n            <Button color='green' inverted onClick={this.handleSubmit}>\r\n              <Icon name='checkmark' /> Add\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Sidebar\r\n","import React, { Component } from 'react'\r\nimport { Segment, Header, Icon } from 'semantic-ui-react';\r\n\r\nexport class MessageHeader extends Component {\r\n  render() {\r\n    let { activeChannel } = this.props\r\n    return (\r\n      <Segment>\r\n        <Header as=\"h2\">\r\n          <Icon name=\"bullhorn\" />\r\n          <Header.Content>{ activeChannel.name[0].toUpperCase() + activeChannel.name.slice(1) }</Header.Content>\r\n          <Header.Subheader>\r\n            Description : <span>{activeChannel.description[0].toUpperCase() + activeChannel.description.slice(1)}</span>\r\n          </Header.Subheader>\r\n        </Header>\r\n      </Segment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MessageHeader\r\n","import React, { Component } from 'react'\r\nimport { Segment, Card } from 'semantic-ui-react';\r\nimport moment from 'moment'\r\n\r\nexport class MessagesBody extends Component {\r\n\r\n  componentDidMount(){\r\n    this.scrollDown()\r\n  }\r\n  \r\n  componentDidUpdate( a, b ){\r\n    this.scrollDown()\r\n  }\r\n\r\n  scrollDown(){\r\n    const { contaniner } = this.refs\r\n    contaniner.scrollTop = contaniner.scrollHeight\r\n  }\r\n\r\n  render() {\r\n    let { messages , user, typingUser } = this.props\r\n    return (\r\n      <Segment style={{ height: 'calc( 100vh - 56px - 147px)'}}>\r\n        <div ref='contaniner' style={{  height:'calc( 100vh - 56px - 147px - 35px)', overflowY: 'auto'}}>\r\n          <div style={{ minHeight: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'flex-end', padding: '.1em', paddingRight: '.5em' }}>\r\n            {\r\n              messages.length > 0 && (\r\n                messages.map( message => (\r\n                  <Card key={ message.id } fluid style={{ marginTop: '0px'}}>\r\n                    <Card.Content\r\n                      style={{ padding: '3px 10px' }} \r\n                      textAlign={ message.sender === user.nickname ? 'right' : 'left' }>\r\n                      <h3>{message.message}</h3>\r\n                      {message.sender[0].toUpperCase() + message.sender.slice(1)} Send @ { moment(message.timef).fromNow()}\r\n                    </Card.Content>\r\n                  </Card>\r\n                ))\r\n              )\r\n            }\r\n            { \r\n              typingUser && typingUser.map( name => (\r\n                <div key={name} className=\"typing-user\">\r\n\t\t\t\t\t\t\t\t\t{`${name[0].toUpperCase() + name.slice(1)} is typing . . .`}\r\n\t\t\t\t\t\t\t\t</div>\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n      </Segment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MessagesBody\r\n","import React, { Component } from 'react'\r\nimport { Segment, Form, Icon } from 'semantic-ui-react';\r\n\r\nexport class MessageInput extends Component {\r\n  state = {\r\n    msg: ''\r\n  }\r\n\r\n  handleChange = e => this.setState({ msg: e.target.value })\r\n\r\n  handleSubmit = () => {\r\n    this.props.sendMsg( this.state.msg )\r\n    this.setState({ msg: '' })\r\n  }\r\n\r\n  handleOnFocused = () => this.props.sendTyping( true )\r\n\r\n  handleOnBlur = () => this.props.sendTyping( false )\r\n\r\n  render() {\r\n    let { msg } = this.state \r\n    return (\r\n      <Segment>\r\n        <Form onSubmit={msg.length > 0 ? this.handleSubmit : null }>\r\n          <Form.Input\r\n            fluid\r\n            name='msg'\r\n            value={msg}\r\n            placeholder='Write your message'\r\n            onChange={this.handleChange}\r\n            onFocus = {this.handleOnFocused}\r\n            onBlur = {this.handleOnBlur}\r\n            icon={<Icon \r\n              name='send' \r\n              link \r\n              circular \r\n              inverted \r\n              onClick={ this.handleSubmit }\r\n              disabled = { msg.length < 1 } \r\n            />}\r\n          />\r\n        </Form>\r\n      </Segment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MessageInput\r\n","import React, { Component } from 'react'\r\nimport events from '../../events'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport Sidebar from './Sidebar';\r\nimport MessageHeader from './MessageHeader'\r\nimport MessagesBody from './MessagesBody'\r\nimport MessageInput from './MessageInput'\r\n\r\n\r\nexport class ChatPage extends Component {\r\n\r\n  state = {\r\n    chats: [],\r\n    activeChannel: null\r\n  }\r\n\r\n  componentDidMount(){\r\n    let { socket } = this.props\r\n    socket.emit(events.INIT_CHATS, this.initChats )\r\n    socket.on( events.MESSAGE_SEND, this.addMessage )\r\n    socket.on( events.TYPING, this.addTyping )\r\n    socket.on( events.P_MESSAGE_SEND, this.addPMessage )\r\n    socket.on( events.P_TYPING, this.addPTyping)\r\n    socket.on( events.CREATE_CHANNEL, this.updateChats )\r\n  }\r\n\r\n  initChats =  _chats  => this.updateChats( _chats, true )\r\n  \r\n  updateChats = ( _chats, init=false ) => {\r\n    let { chats } = this.state\r\n    let newChats = init ? [ ..._chats ] : [ ...chats, _chats ]\r\n    this.setState({ chats: newChats, activeChannel: init ? _chats[0] : this.state.activeChannel })\r\n  }\r\n\r\n  addTyping = ({ channel, isTyping, sender }) => {\r\n    let { user } = this.props\r\n    let { chats } = this.state\r\n    if( sender === user.nickname ) return\r\n    chats.map( chat => {\r\n      if( chat.name === channel ){\r\n        if( isTyping && !chat.typingUser.includes( sender )){\r\n          chat.typingUser.push( sender )\r\n        } else if( !isTyping && chat.typingUser.includes( sender )){\r\n          chat.typingUser = chat.typingUser.filter( u => u !== sender )\r\n        }\r\n      }\r\n      return null\r\n    })\r\n    this.setState({ chats })\r\n  }\r\n\r\n  addPTyping = ({ channel, isTyping }) => {\r\n    console.log( channel, isTyping )\r\n    let { pChats } = this.props\r\n    pChats.map( pChat => {\r\n      if( pChat.name === channel ){\r\n        pChat.isTyping = isTyping\r\n      }\r\n      return null\r\n    })\r\n    this.setState({ pChats })\r\n  }\r\n\r\n  addMessage = ({ channel, message }) => {\r\n    let { activeChannel, chats } = this.state\r\n\r\n    chats.map( chat => {\r\n      if( chat.name === channel ) {\r\n        chat.messages.push( message )\r\n        if ( activeChannel.name !== channel ) chat.msgCount ++\r\n      }\r\n      return null\r\n    })\r\n    this.setState({ chats })\r\n  }\r\n\r\n  addPMessage = ({ channel, message }) => {\r\n    let { activeChannel } = this.state\r\n    let { pChats } = this.props\r\n\r\n    pChats.map( pChat => {\r\n      if( pChat.name === channel ) {\r\n        pChat.messages.push( message )\r\n        if( activeChannel.name !== channel ) pChat.msgCount ++\r\n      }\r\n      return null\r\n    })\r\n    this.setState({ pChats })\r\n  }\r\n\r\n  sendMsg = msg => {\r\n    let { socket, users  } = this.props\r\n    let { activeChannel } = this.state\r\n    if( activeChannel.type ) {\r\n      let receiver = users[ activeChannel.name ]\r\n      socket.emit( events.P_MESSAGE_SEND, { receiver, msg })\r\n    } else {\r\n      socket.emit( events.MESSAGE_SEND, { channel: activeChannel.name, msg })\r\n    }\r\n\r\n  }\r\n\r\n  sendTyping = isTyping => {\r\n    let { socket, users } = this.props\r\n    let { activeChannel } = this.state\r\n    if( activeChannel.type ){\r\n      let receiver = users[ activeChannel.name ]\r\n      socket.emit( events.P_TYPING, { receiver: receiver.socketId, isTyping })\r\n    }\r\n    socket.emit( events.TYPING, { channel: activeChannel.name, isTyping })\r\n  }\r\n\r\n  setActiveChannel = name => {\r\n    let newActive = this.state.chats.filter( chat => chat.name === name )\r\n    newActive[0].msgCount = 0\r\n    this.setState({ activeChannel: newActive[0] })\r\n  }\r\n\r\n  setActivePChannel = name => {\r\n    let newActive = this.props.pChats.filter( pChat => pChat.name === name )\r\n    newActive[0].msgCount = 0\r\n    this.setState({ activeChannel: newActive[0] })\r\n  }\r\n \r\n  render() {\r\n    let { user, users, pChats, logout, socket } = this.props\r\n    let { activeChannel, chats } = this.state\r\n    return (\r\n      <Grid style={{ height: '100vh', margin: '0px'}}>\r\n        <Grid.Column computer={4} tablet={ 4 } mobile={6} style={{ background: '#4c3c4c', height: '100%'}}>\r\n          <Sidebar\r\n            user = { user }\r\n            users = { users }\r\n            chats = { chats }\r\n            socket = { socket }\r\n            activeChannel = { activeChannel }\r\n            logout = { logout }\r\n            setActivePChannel = { this.setActivePChannel }\r\n            setActiveChannel = { this.setActiveChannel }\r\n            pChats = { pChats }\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column computer={12} tablet={ 12 } mobile={10} style={{ background: '#eee', height: '100%'}}>\r\n        {\r\n          activeChannel && (\r\n            <React.Fragment>\r\n              <MessageHeader activeChannel= { activeChannel } />\r\n              <MessagesBody \r\n                messages = { activeChannel.messages } \r\n                user={ user } \r\n                typingUser = { activeChannel.typingUser } />\r\n              <MessageInput \r\n                sendMsg = { this.sendMsg } \r\n                sendTyping = { this.sendTyping } />  \r\n            </React.Fragment>\r\n          ) \r\n        }\r\n        </Grid.Column>\r\n      </Grid>   \r\n    )\r\n  }\r\n}\r\n\r\nexport default ChatPage\r\n","import React, { Component } from 'react'\r\nimport event from  '../../events'\r\nimport { Grid, Header, Icon, Form, Message } from 'semantic-ui-react';\r\n\r\nexport class LoginPage extends Component {\r\n  state = {\r\n    nickname: '',\r\n    error: ''\r\n  }\r\n  \r\n  isvalid = ({ nickname }) => nickname\r\n\r\n  setUser = ({ user, isUser }) =>  {\r\n    if( isUser ) {\r\n      this.setState({ error: 'This nickname already taken'})\r\n    } else {\r\n      this.setState({ error : '' })\r\n      this.props.setUser( user )\r\n    }\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({ nickname: e.target.value })\r\n  }\r\n\r\n  \r\n  handleSubmit = () => {\r\n    let { socket } = this.props\r\n    let { nickname } = this.state\r\n    this.isvalid( this.state ) ? socket.emit( event.IS_USER, nickname, this.setUser ) :\r\n    this.setState({ error : 'Please input your nickname'})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid\r\n        style={{ height: '100vh', padding: '0px', margin: '0px' }}\r\n        textAlign='center'\r\n        verticalAlign='middle'\r\n      >\r\n        <Grid.Column computer={ 6 } tablet={ 8 } mobile={ 14 } >\r\n          <Header as='h2' icon textAlign='center' color='blue'>\r\n            <Icon name='discussions' />\r\n            Simple Chats.\r\n          </Header>\r\n          <Form size='small' onSubmit={this.handleSubmit}>\r\n            <Form.Input \r\n              name='nickname'\r\n              type='text'\r\n              placeholder='Your nickname !'\r\n              onChange={this.handleChange}\r\n              autoFocus\r\n              icon={<Icon name='add user' link circular inverted onClick={ this.handleSubmit } />}\r\n            />\r\n            { this.state.error && (\r\n              <Message negative>{ this.state.error }</Message>\r\n            )}\r\n          </Form>\r\n        </Grid.Column>\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoginPage\r\n","import React, { Component } from 'react'\r\nimport io from 'socket.io-client'\r\nimport events from '../events'\r\nimport ChatPage from '../components/ChatsPage/ChatPage'\r\nimport LoginPage from '../components/LoginPage/LoginPage'\r\n\r\n\r\n// const socketUrl = 'http://localhost/' ***** it will used in dev mode\r\nconst socketUrl = '/'\r\n\r\nexport class Main extends Component {\r\n    state = {\r\n        socket: null,\r\n        user: null,\r\n        users: {},\r\n        pChats: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initSocket()\r\n    }\r\n\r\n    initSocket = () => {\r\n        let socket = io( socketUrl )\r\n        this.setState({ socket })\r\n        socket.on('connect', () => console.log( 'Connected'))\r\n        socket.on( events.LOGOUT, this.setUsers( false ))\r\n        socket.on( events.NEW_USER, this.setUsers( true ))\r\n    }\r\n\r\n    setUser = user => {\r\n        let { socket } = this.state\r\n        this.setState({ user })\r\n        socket.emit( events.NEW_USER, user )\r\n    }\r\n\r\n    setUsers = isNewUsers => ({ newUsers, outUser }) => {\r\n        let { user, pChats } = this.state\r\n        if( isNewUsers ){\r\n            let newPChats = [...pChats]\r\n            let oldPChats = pChats.map( pChat => pChat.name ) \r\n            user && Object.keys( newUsers ).map( newUser => {\r\n                if( newUser !== user.nickname && !oldPChats.includes( newUser )){\r\n                    newPChats.push({\r\n                        name: newUser,\r\n                        description: 'direct message',\r\n                        messages: [],\r\n                        isTyping: false,\r\n                        msgCount: 0,\r\n                        type: 'Private'\r\n                    })\r\n                }\r\n                return null\r\n            }) \r\n            this.setState({ users : newUsers, pChats: newPChats  })\r\n        } else {\r\n            let newPChats = pChats.filter( pChat => pChat.name !== outUser )\r\n            this.setState({ users: newUsers, pChats: newPChats })\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        let { socket } = this.state\r\n        socket.emit( events.LOGOUT )\r\n        this.setState({ user: null }) \r\n    }\r\n\r\n    render() { \r\n        let { user, users, pChats, socket } = this.state\r\n        return (\r\n            user ? \r\n            <ChatPage \r\n                user = { user }\r\n                users = { users }\r\n                pChats = { pChats }\r\n                socket = { socket }\r\n                logout = { this.logout }\r\n            /> : \r\n            <LoginPage socket={socket} setUser={this.setUser} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React, { Component } from 'react';\nimport Main from './components/Main'\n\nclass App extends Component {\n  render() {\n    return (\n      <Main />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}